generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

enum PricingType {
    RECURRING
    ONE_TIME
}

enum PricingPlanInterval {
    YEAR
    MONTH
    WEEK
    DAY
}

enum SubscriptionStatus {
    UNPAID
    PAST_DUE
    INCOMPLETE_EXPIRED
    INCOMPLETE
    CANCELED
    ACTIVE
    TRIALING
}

model User {
    id           String         @id @default(auto()) @map("_id") @db.ObjectId
    username     String
    password     String
    email        String         @unique
    createdAt    DateTime       @default(now())
    // links        Link[]
    // Sessions     Session[]
    // Collaborator Collaborator[]
    // Subscription Subscription[]
}

model Tag {
    id        String    @id @default(auto()) @map("_id") @db.ObjectId
    title     String    @unique
    createdAt DateTime  @default(now())
    FileTag   FileTag[]
}

model Link {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    hash      String
    createdAt DateTime @default(now())

    userId String? @db.ObjectId
    // User   User?   @relation(fields: [userId], references: [id])
}

model Session {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    userId    String   @db.ObjectId
    // user      User     @relation(fields: [userId], references: [id])
    createdAt DateTime @default(now())
    expiresAt DateTime
}

model Workspace {
    id             String         @id @default(auto()) @map("_id") @db.ObjectId
    createdAt      DateTime       @default(now())
    workspaceOwner String         @db.ObjectId // user ID of the owner
    title          String
    iconId         String
    data           String?
    inTrash        String?
    logo           String?
    bannerUrl      String?
    // Folder         Folder[]
    // File           File[]
    // Collaborator   Collaborator[]
}

model Collaborator {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    workspaceId String   @db.ObjectId
    userId      String   @db.ObjectId
    createdAt   DateTime @default(now())

    // Workspace Workspace @relation(fields: [workspaceId], references: [id])
    // User      User      @relation(fields: [userId], references: [id])
}

model Folder {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt   DateTime @default(now())
    title       String
    iconId      String
    data        String?
    inTrash     String?
    bannerUrl   String?
    workspaceId String   @db.ObjectId

    // Workspace Workspace @relation(fields: [workspaceId], references: [id])
    // File      File[]
}

model File {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt   DateTime @default(now())
    title       String
    iconId      String
    data        String?
    inTrash     String?
    bannerUrl   String?
    workspaceId String   @db.ObjectId
    folderId    String   @db.ObjectId

    // Workspace Workspace @relation(fields: [workspaceId], references: [id])
    // Folder    Folder    @relation(fields: [folderId], references: [id])

    // fileTags FileTag[]
}

model FileTag {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    fileId    String   @db.ObjectId
    tagId     String   @db.ObjectId
    createdAt DateTime @default(now())

    // File File @relation(fields: [fileId], references: [id])
    Tag  Tag  @relation(fields: [tagId], references: [id])
}

model Customer {
    id               String  @id @default(auto()) @map("_id") @db.ObjectId
    stripeCustomerId String?

    // Optional: Relation to User if applicable
    // userId          String? @db.ObjectId
    // user            User?   @relation(fields: [userId], references: [id])
}

model Product {
    id          String  @id @default(auto()) @map("_id") @db.ObjectId
    active      Boolean
    name        String?
    description String?
    image       String?
    metadata    Json?
    // prices Price[]
}

model Price {
    id              String               @id @default(auto()) @map("_id") @db.ObjectId
    productId       String?              @db.ObjectId
    // product         Product?             @relation(fields: [productId], references: [id])
    active          Boolean?
    description     String?
    unitAmount      Int
    currency        String?
    type            PricingType?
    interval        PricingPlanInterval?
    intervalCount   Int?
    trialPeriodDays Int?
    metadata        Json?

    // subscriptions Subscription[]
}

model Subscription {
    id                 String              @id @default(auto()) @map("_id") @db.ObjectId
    userId             String              @db.ObjectId
    status             SubscriptionStatus?
    metadata           Json?
    priceId            String?             @db.ObjectId
    // price              Price?              @relation(fields: [priceId], references: [id])
    quantity           Int?
    cancelAtPeriodEnd  Boolean?
    created            DateTime            @default(now())
    currentPeriodStart DateTime            @default(now())
    currentPeriodEnd   DateTime            @default(now())
    endedAt            DateTime?
    cancelAt           DateTime?
    canceledAt         DateTime?
    trialStart         DateTime?
    trialEnd           DateTime?

    // Optional: Relation to User if needed
    // user User @relation(fields: [userId], references: [id])
}
